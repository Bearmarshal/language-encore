'scopeName': 'source.enc'
'fileTypes': [
  'enc'
]
'name': 'Encore'
'foldingStartMarker': '{\\s*$'
'foldingStopMarker': '}\\s*$'
'patterns' : [
  {
    'comment': 'Line comments'
    'begin': '--'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.comment.enc'
    'end': '$'
    'name': 'comment.line.double-dash.enc'
  }

  {
    'comment': 'Built-in functions'
    'match': '\\b(print|get|await|async)\\b(?=\\()'
    'name': 'support.function.builtin.enc'
  }

  {
    'comment': 'Class definition'
    'match': '(\\bpassive\\b\\s+)?(\\bclass\\b)(?:\\s+([a-zA-Z_]\\w*))(?=:)'
    'captures':
      '1':
        'name': 'storage.modifier.enc'
      '2':
        'name': 'storage.type.enc'
      '3':
        'name': 'entity.name.class'
  }

  {
    'comment': 'Function declarations'
    'match': '(\\bdef\\b)(?:\\s+([a-zA-Z_]\\w*)(?=\\())?'
    'captures':
      '1':
        'name': 'keyword.define.enc'
      '2':
        'name': 'entity.name.function'
  }
  {
    'comment': 'Function call'
    'match': '([a-zA-Z_]\\w*)(?=\\()'
    'captures':
      '1':
        'name': 'support.function.enc'
  }

  {
    'match': '\\bthis\\b'
    'name': 'variable.language.this.enc'
  }

  {
    'comment': 'Interpreted string literals'
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.enc'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.enc'
    'name': 'string.quoted.double.enc'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'comment': 'Floating-point literals'
    'match': '(\\.\\d+([Ee][\-\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?i?\\b)?'
    'name': 'constant.numeric.floating-point.enc'
  }
  {
    'comment': 'Integers'
    'match': '\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\-\+]\\d+i?))\\b'
    'name': 'constant.numeric.integer.enc'
  }

  {
    'comment': 'Language constants'
    'match': '\\b(true|false|null)\\b'
    'name': 'constant.language.enc'
  }

  {
    'comment': 'Bundle declarations'
    'match': '(?<=bundle)\\s+([a-zA-Z_]\\w*)\\s+(?=where)'
    'captures':
      '1':
        'name': 'entity.name.bundle'
  }

  {
    'comment': 'Terminators'
    'match': ';'
    'name': 'punctuation.terminator.enc'
  }

  {
    'include': '#keywords'
  }
  {
    'include': '#storage_types'
  }
  {
    'include': '#danger-words'
  }
  {
    'include': '#operators'
  }
]

'repository' :
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\([0-7]{3}|[abfnrtv\\\\\'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
        'name': 'constant.character.escape.enc'
      }
      {
        'match': '\\\\[^0-7xuUabfnrtv\\\'"]'
        'name': 'invalid.illegal.unknown-escape.enc'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]'
        'name': 'constant.other.placeholder.enc'
      }
    ]
  'keywords':
    'patterns': [
      {
        'comment': 'Control keywords'
        'match': '\\b(and|async|await|by|class|chain|def|else|eos|for|foreach|get|getNext|if|in|join|let|liftf|liftv|match|new|not|or|passive|print|repeat|require|stream|suspend|then|this|trait|unless|val|when|while|with|yield|bundle|where)\\b'
        'name': 'keyword.control.enc'
      }
    ]
  'danger-words':
    'patterns': [
      {
        'match' : '\\b(embed|body|en)\\b'
        'name' : 'keyword.danger.enc'
      }
    ]
  'storage_types':
    'patterns': [
      {
        'comment': 'Storage types'
        'match': '\\b(class|bool|char|real|int|uint|string|void)\\b'
        'name': 'storage.type.enc'
      }
    ]
  'operators':
    'comment': 'Note that the order here is very important!'
    'patterns': [
      {
        'match': '\\-\\-'
        'name': 'keyword.operator.decrement.enc'
      }
      {
        'match': '\\+\\+'
        'name': 'keyword.operator.increment.enc'
      }
      {
        'match': '(==|!=|<=|>=|<[^<]|>[^>])'
        'name': 'keyword.operator.comparison.enc'
      }
      {
        'match': '(&&|\\|\\||!)'
        'name': 'keyword.operator.logical.enc'
      }
      {
        'match': '(\\+|\\-|\\*|/|%)'
        'name': 'keyword.operator.arithmetic.enc'
      }
      {
        'match': '(&(?!\\^)|\\||\\^|&\\^|<<|>>)'
        'name': 'keyword.operator.arithmetic.bitwise.go'
      }
    ]
